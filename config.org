#+TITLE: My Emacs Config

* Global settings

** Global variables

#+BEGIN_SRC emacs-lisp

  ;; (add-to-list 'initial-frame-alist '(font . "Courier New-12"))
  ;; (add-to-list 'default-frame-alist '(font . "Courier New-12"))

  ;; move stuff to trash instead of vaporize
  (setq delete-by-moving-to-trash t)

  ;; don't show the start up screen
  (setq inhibit-startup-screen t)

  ;; i know what the scratch buffer is now, thanks
  (setq initial-scratch-message nil)

  ;; word wrap off by default
  (setq-default truncate-lines t)

  ;; show column numbers in mode line
  (setq column-number-mode t)

  ;; C-k kills new line
  (setq kill-whole-line t)

  ;; Only use one space for sentences
  (setq sentence-end-double-space nil)

  ;; This will show the current key combo in minbuffer sooner
  (setq echo-keystrokes 0.1)

  ;; This seems like a better default
  ;; (setq-default fill-column 78)

  ;; Don't give file too big warning unless file is actually big
  (setq large-file-warning-threshold (* 100 1000 1000))

  ;; emacs will prompt before closing
  (setq confirm-kill-emacs 'yes-or-no-p)

  ;; allow C-u C-<SPC> C-<SPC> to cycle mark ring
  (setq set-mark-command-repeat-pop t)

  ;; file encoding stuff
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; backup file stuff
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
        backup-by-copying t
        ;; version-control t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2)

  ;; auto-save file stuff
  (setq auto-save-file-name-transforms
    `((".*" ,(concat user-emacs-directory (file-name-as-directory "autosave")) t)))

  ;; make ediff split vertically by default (which emacs calls horizontal)
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-merge-split-window-function 'split-window-horizontally)

  ;; don't use another frame even when in GUI mode
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; enable commands
  (put 'scroll-left 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  ;; i don't like typing yes and no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; turn off visible bell
  (setq ring-bell-function 'ignore)

  ;; make scrolling more bearable
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1
        mouse-wheel-progressive-speed nil
        mouse-wheel-scroll-amount '(1 ((shift) . 5)))

  ;; default to unified diffs
  (setq diff-switches "-u")

  ;; don't split screen side by side
  ;; not sure how i feel about this yet...
  ;(setq split-width-threshold nil)
  ;; don't split screen up and down
  ;(setq split-height-threshold nil)

  ;; turn off the toolbar
  (tool-bar-mode -1)

  ;; turn off vertical scroll bars
  (scroll-bar-mode -1)

  ;; and the horizontal scroll bars too
  (if (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))

  ;; turn off blinking cursor
  (blink-cursor-mode -1)

  ;; turn on paren matching
  (show-paren-mode +1)

  ;; highlight current line
  (global-hl-line-mode +1)

  ;; use winner mode
  (winner-mode +1)

  ;; revert buffers automatically
  (global-auto-revert-mode +1)

  ;; electric pair mode
  ;; (electric-pair-mode +1)

  ;; and do the dired buffers too
  (setq global-auto-revert-non-file-buffers t)

  ;; prettify symbols is nice
  (prettify-symbols-mode +1)

  ;; this makes the symbol unprettify if point is nearby
  (setq prettify-symbols-unprettify-at-point 'right-edge)

#+END_SRC

** Global key bindings

*** General bindings

#+BEGIN_SRC emacs-lisp

  ;; use ibuffer instead
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (global-set-key (kbd "C-x C-r") 'recentf-open-files)

  ;; default to regex search
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  ;; default to regex replace
  (global-set-key (kbd "M-%") 'query-replace-regexp)
  (global-set-key (kbd "C-%") 'query-replace-regexp)
  (global-set-key (kbd "C-M-%") 'query-replace)

  ;; swap the scroll keys, i think of them backwards apparently
  (global-set-key (kbd "C-x >") 'scroll-left)
  (global-set-key (kbd "C-x <") 'scroll-right)

  ;; I often type C-x f but not because I want to set the fill
  ;; (global-set-key (kbd "C-x f") 'find-file)

  ;; bind custom `unfill-region'
  (global-set-key (kbd "C-M-q") 'unfill-region)

  ;; use hippie expand
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; seems a bit overkill to give 'suspend-frame' two bindings
  (global-set-key (kbd "C-x C-z") 'repeat-complex-command)

  ;; switch to 'apropos' instead of 'apropos-command'
  (global-set-key (kbd "C-h a") 'apropos)

  ;; the default here should be this anyway:
  (global-set-key (kbd "M-=") 'count-words)

  ;; text sizing
  (global-set-key (kbd "M-+") 'text-scale-increase)
  (global-set-key (kbd "M-_") 'text-scale-decrease)

  ;; M-s prefix has search-related items, put grep there
  (global-set-key (kbd "M-s g") 'grep)
  (global-set-key (kbd "M-s r") 'rgrep)

  ;; M-g prefix is for going to, put register jumping there
  (global-set-key (kbd "M-g r") 'jump-to-register)

  ;; M-` is captured on some systems, put the menu here
  (global-set-key (kbd "<f2>") 'tmm-menubar)

  ;; give window functions easier key bindings
  (global-set-key (kbd "M-1") 'delete-other-windows)
  (global-set-key (kbd "M-2") 'split-window-below)
  (global-set-key (kbd "M-3") 'split-window-right)
  (global-set-key (kbd "M-4") 'jp/switch-other-buffer)
  (global-set-key (kbd "M-6") 'jp/buffers-manage)
  (global-set-key (kbd "M-7") 'previous-buffer)
  (global-set-key (kbd "M-8") 'next-buffer)
  (global-set-key (kbd "M-9") 'jp/windows-manage)
  (global-set-key (kbd "M-0") 'delete-window)

  ;; and make corresponding frame key bindings
  (global-set-key (kbd "C-M-1") 'delete-other-frames)
  (global-set-key (kbd "C-M-2") 'make-frame-command)
  (global-set-key (kbd "C-M-3") 'make-frame-command)
  (global-set-key (kbd "C-M-7") 'jp/previous-frame)
  (global-set-key (kbd "C-M-8") 'jp/next-frame)
  (global-set-key (kbd "C-M-9") 'other-frame)
  (global-set-key (kbd "C-M-0") 'delete-frame)

  ;; scrolling
  (global-set-key (kbd "C-<next>") 'jp/scroll-left)
  (global-set-key (kbd "C-<prior>") 'jp/scroll-right)

#+END_SRC

Function ~comment-line~ is new in Emacs 25. I like it better than
~comment-dwim~ so set key bindings accordingly. It is possible to join
their behavior, see [[http://ergoemacs.org/misc/emacs_comment-line_vs_comment-dwim.html][here]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-;") 'comment-line)
  (global-set-key (kbd "C-M-;") 'comment-dwim)
#+END_SRC

*** User prefix ("C-c")

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-c t") 'toggle-truncate-lines)

  ;; buffer reverting
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "C-c R") 'auto-revert-mode)
  (global-set-key (kbd "C-c T") 'auto-revert-tail-mode)

  ;; copy filename to clipboard
  (global-set-key (kbd "C-c p") 'jp/copy-filename)

  ;; sometimes i need to toggle ido
  (global-set-key (kbd "C-c i") 'ido-mode)

  ;; sometimes i like to toggle auto fill mode
  (global-set-key (kbd "C-c f") 'auto-fill-mode)

  ;; org mode keys
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)

  ;; C-c i prefix for inserting
  (define-prefix-command 'jp/insert-keymap)
  (define-key mode-specific-map "i" jp/insert-keymap)
  (define-key jp/insert-keymap "d" 'jp/insert-date)
  (define-key jp/insert-keymap "t" 'jp/insert-date-time)

#+END_SRC

** Functions

*** Copy filename

Next set of functions is used to copy filename to clipboard.

#+BEGIN_SRC emacs-lisp

  (defun jp/get-filename-buffer ()
    "Gets filename of current buffer."
    (interactive)
    (let ((buffer (current-buffer)))
      (when buffer (buffer-file-name buffer))))

  (defun jp/get-filename-dired ()
    "Gets filename of current dired line."
    (interactive)
    (dired-get-filename nil t))

  (defun jp/copy-filename ()
    "Copy filename of buffer or dired line to clipboard."
    (interactive)
    (let ((file-name
           (if (derived-mode-p 'dired-mode)
               (jp/get-filename-dired)
             (jp/get-filename-buffer))))
      (when file-name
        (kill-new file-name)
        (message "'%s' copied to clipboard." file-name))))


#+END_SRC

*** Buffer and window management

#+BEGIN_SRC emacs-lisp

  ;; switch back and forth quickly
  (defun jp/switch-other-buffer ()
    "Switch to other buffer without prompting."
    (interactive)
    (switch-to-buffer (other-buffer)))


  (defun jp/buffers-manage (arg)
    "Fancy buffer management.
With no prefix, call `kill-buffer'.
With one \\[universal-argument], call `delete-file-and-buffer'.
With two \\[universal-argument], call `bury-buffer'."
    (interactive "p")
    (cl-case arg
      (4 (jp/delete-file-and-buffer))
      (16 (bury-buffer))
      (t (kill-buffer))))


  (defun jp/windows-manage (arg)
  "Fancy window selection.
With no prefix, call `other-window'.
With one \\[universal-argument], call `ace-swap-window'.
With two \\[universal-argument], call `windresize'."
  (interactive "p")
  (cl-case arg
    (4 (ace-swap-window))
    (16 (windresize))
    (t (other-window 1))))

#+END_SRC

This is from [[http://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/][Emacs Redux]].

#+BEGIN_SRC emacs-lisp

  (defun jp/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))

#+END_SRC

*** Frame management

I don't know if I'm backward or what but from what I've played with so
far, +1 goes back and -1 goes forward.

#+BEGIN_SRC emacs-lisp
  (defun jp/previous-frame ()
    (interactive)
    (other-frame +1))

  (defun jp/next-frame ()
    (interactive)
    (other-frame -1))
#+END_SRC
*** Scrolling

#+BEGIN_SRC emacs-lisp

  ;; scrolling by default moves the screen too much for me
  (defun jp/scroll-left ()
    "Scrolls the window one third to the left."
    (interactive)
    (scroll-left (/ (window-body-width) 3) t))

  (defun jp/scroll-right ()
    "Scrolls the window one third to the right."
    (interactive)
    (scroll-right (/ (window-body-width) 3) t))

#+END_SRC

*** Revert buffer

#+BEGIN_SRC emacs-lisp

  (defun jp/revert-buffer ()
    "Revert buffer."
    (interactive)
    (revert-buffer nil t)
    (message "Reverted buffer '%s'" (buffer-name)))

#+END_SRC

*** Unfill region

#+BEGIN_SRC emacs-lisp

  (defun unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
  logical line.  This is useful, e.g., for use with
  `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

#+END_SRC

*** Insert date

#+BEGIN_SRC emacs-lisp

  (defun jp/insert-date ()
    "Insert the current date."
    (interactive)
    (insert-string (format-time-string "%Y-%m-%d")))

  (defun jp/insert-date-time ()
      "Insert the current date and time."
      (interactive)
      (insert-string (format-time-string "%Y-%m-%d %H:%M:%S")))

#+END_SRC

*** sudo-edit

[[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][Link]] to post.

#+BEGIN_SRC emacs-lisp

  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC

[[https://github.com/jkitchin/jmax/blob/master/jmax-org.el][Link]] to some misc Org configure stuff from John Kitchin.

[[https://github.com/purcell/whole-line-or-region][Link]] to whole-line-or-region.

** Registers

#+BEGIN_SRC emacs-lisp

  (set-register ?c '(file . "~/.emacs.d/config.org"))
  (set-register ?j '(file . "~/Dropbox/Org/journal.org"))
  (set-register ?d '(file . "~/Dropbox/Org/diary.org"))
  (set-register ?n '(file . "~/Dropbox/Org/notes.org"))
  (set-register ?w '(file . "~/Dropbox/Org/work.org"))
  (set-register ?o '(file . "~/Dropbox/Org/"))

#+END_SRC

** Theme and custom faces

#+BEGIN_SRC emacs-lisp

  (load-theme 'deeper-blue)

  ;; this makes some things easier to read when using emacs over putty
  (custom-set-faces
   '(comint-highlight-prompt ((t (:weight bold))))
   '(minibuffer-prompt ((t (:weight bold))))
  )

#+END_SRC

** System specific
*** Mac

#+BEGIN_SRC emacs-lisp

  ;; on a mac, i like command to be meta
  (if (eq system-type 'darwin)
      (setq mac-command-modifier 'meta))

#+END_SRC

* Standard Emacs packages

** 'org'

See [[https://github.com/jkitchin/jmax][John Kitchin's config]] for many org-mode options.

#+BEGIN_SRC emacs-lisp

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

  ;; turns off the default CSS for HTML exports
  (setq org-html-head-include-default-style nil)

  ;; make <RET> follow links
  (setq org-return-follows-link t)

  ;; use e.g. n/p/f/b when at the beginning of a headline
  (setq org-use-speed-commands t)

  ;; change the ... in outline mode
  (setq org-ellipsis " >")

  ;; edit source in same window
  (setq org-src-window-setup 'current-window)

  ;; enable prompt-free code running
  (setq org-confirm-babel-evaluate nil)

  ;; default capture goes here
  (setq org-default-notes-file "~/Dropbox/Org/notes.org")

  ;; add all org files in this dir to agenda
  (setq org-agenda-files '("~/Dropbox/Org/"))

  (setq org-agenda-ndays 21)

  ;; load languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (emacs-lisp . t)
     (sh . t)))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/Org/notes.org" "Tasks")
           "* TODO %?\n  %i\n")
          ("d" "Diary" entry (file+datetree "~/Dropbox/Org/diary.org")
           "* %?\nEntered on %U\n  %i\n")))

#+END_SRC

** 'desktop'

#+BEGIN_SRC emacs-lisp

  ;; save desktop
  (desktop-save-mode +1)

  ;; see doc, not sure i like this
  ;(setq desktop-restore-eager 10)

  (setq desktop-globals-to-save
    '(desktop-missing-file-warning
;      tags-file-name
;      tags-table-list
      search-ring
      regexp-search-ring
;      register-alist
      file-name-history))

#+END_SRC

** 'recentf'

See [[http://www.emacswiki.org/emacs/RecentFiles][recentf]].

#+BEGIN_SRC emacs-lisp

  (require 'recentf)

  (recentf-mode +1)
  (setq recentf-max-menu-items 100)

#+END_SRC

** 'ibuffer'

See [[http://www.emacswiki.org/emacs/IbufferMode][ibuffer]].

#+BEGIN_SRC emacs-lisp

  (require 'ibuffer)

  (autoload 'ibuffer "ibuffer" "List buffers." t)

  ;; don't prompt every time I close buffers
  ;; http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
  (setq ibuffer-expert t)

  (setq ibuffer-saved-filter-groups
        `(("default"
           ("Dired" (mode . dired-mode))
           ("Org" (mode . org-mode))
           ("Python" (or (mode . python-mode)
                         (mode . inferior-python-mode)))
           ("R" (or (name . "^\\*R\\*$")
                    (mode . ess-mode)
                    (mode . ess-help-mode)))
           ;; ("Emacs Lisp" (or (mode . emacs-lisp-mode)
           ;;                   (filename . ,(expand-file-name "~/.emacs"))))
           ("Stuff" (or (mode . Man-mode)
                        (mode . woman-mode)
                        (mode . Info-mode)
                        (mode . Help-mode)
                        (mode . help-mode)
                        (name . "^\\*"))))))

  (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default")))

#+END_SRC

** 'ido'

#+BEGIN_SRC emacs-lisp

  (require 'ido)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)

  ;; don't prompt to make a new buffer
  (setq ido-create-new-buffer 'always)
  (ido-mode t)

#+END_SRC

Seems that we need to set ~confirm-nonexistent-file-or-buffer~ to nil
to get ~ido~ and other functions to not ask if it's okay to make a new
buffer...

#+BEGIN_SRC emacs-lisp

  (defadvice ido-switch-buffer (around no-confirmation activate)
    (let ((confirm-nonexistent-file-or-buffer nil))
      ad-do-it))

#+END_SRC

** 'uniquify'

~uniquify~ makes the buffer names unique with path included.

#+BEGIN_SRC emacs-lisp

  (require 'uniquify)

  ;;(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-buffer-name-style 'forward)

#+END_SRC

** 'windmove'

#+BEGIN_SRC emacs-lisp

  (require 'windmove)

  (windmove-default-keybindings)

  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

#+END_SRC

** 'ispell'

#+BEGIN_SRC emacs-lisp

  (require 'ispell)

  (when (eql window-system 'w32)
    (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/")
    (setq ispell-program-name "aspell"))

  (add-hook 'text-mode-hook 'flyspell-mode)

  ;; this doesn't belong in ispell but it goes on text-mode-hook
  (add-hook 'text-mode-hook 'auto-fill-mode)

#+END_SRC

** 'dired-x'

#+BEGIN_SRC emacs-lisp

  ;; for e.g. dired-jump, C-x C-j
  (require 'dired-x)

#+END_SRC

** 'grep'
#+BEGIN_SRC emacs-lisp
  ;; skip RStudio folders in grep
  (require 'grep)
  (add-to-list 'grep-find-ignored-directories ".Rproj*")
  (add-to-list 'grep-find-ignored-directories ".LocalHistory*")
#+END_SRC
** 'server'

Make Emacs a server. Some bug (windows file permissions?) is messing
up server-start.  See [[http://stackoverflow.com/questions/885793/emacs-error-when-calling-server-start][this stackoverflow]] question. I changed the owner
of ~/.emacs.d/server as suggested in answer.

#+BEGIN_SRC emacs-lisp

  (require 'server)
  (if (not (server-running-p))
    (server-start))

#+END_SRC

* Third party packages

** Setup 'package'

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives
    `(("gnu" . "http://elpa.gnu.org/packages/")
      ("melpa" . "http://melpa.org/packages/")
      ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
      ("marmalade" . "http://marmalade-repo.org/packages/")))

  (setq package-archive-priorities
        '(("melpa-stable" . 20)
          ("marmalade" . 20)
          ("gnu" . 10)
          ("melpa" . 0)))
#+END_SRC

This call to ~package-initialize~ has failed with a message "wrong
type argument: arrayp, nil" (e.g. April 2016 on my MacBook Air). I
found a [[http://emacs.stackexchange.com/questions/17823/package-initialize-wrong-type-argument-arrayp-nil][link]] on Emacs StackExchange that said to delete the file

~/.emacs.d/elpa/archives/melpa/archive-contents

when that happens. That fixed my problem.

#+BEGIN_SRC emacs-lisp

  (package-initialize)

#+END_SRC

** Install 'use-package'

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
    
  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

** 'exec-path-from-shell'

#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :config
    (if (memq window-system '(mac ns))
        (exec-path-from-shell-initialize)))

#+END_SRC

** 'swiper'
#+BEGIN_SRC emacs-lisp

  (use-package counsel
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x d") 'counsel-find-file))

  ;; to get counsel-M-x to sort nicely, install smex
  (use-package smex
    :ensure t)

  ;; need to override in ibuffer too
  (define-key ibuffer-mode-map (kbd "C-x C-f") 'counsel-find-file)

  (use-package swiper
    :ensure t
    :config
    (ivy-mode +1)
    (setq ivy-use-virtual-buffers t)
    ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (setq ivy-re-builders-alist
          ;; allow input in any order
          '((t . ivy--regex-ignore-order)))
    (global-set-key "\C-s" 'swiper))

#+END_SRC
** 'flycheck'

#+BEGIN_SRC emacs-lisp

  (use-package flycheck)

#+END_SRC

** 'flymake'

#+BEGIN_SRC emacs-lisp

  ;(use-package flymake)

#+END_SRC

** 'elpy'

#+BEGIN_SRC sh

  conda install jedi
  conda install flake8

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :config
    (elpy-enable)
    (elpy-use-ipython)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    ;; (add-hook 'elpy-mode-hook 'flycheck-mode)
    (setq elpy-test-runner 'elpy-test-nose-runner)
    (setq elpy-syntax-check-command "flake8 --jobs 1")  ; need this for now on windows, without it the process hangs
    (setq python-shell-interpreter-args "--simple-prompt --pprint"))

#+END_SRC

** 'bookmark+'
#+BEGIN_SRC emacs-lisp
  (use-package bookmark+)
#+END_SRC
** 'zop-to-char'

#+BEGIN_SRC emacs-lisp
  (use-package zop-to-char
    :bind ("M-z" . zop-up-to-char))
#+END_SRC
** 'yaml-mode'

#+BEGIN_SRC emacs-lisp

  (use-package yaml-mode
    :mode ("\\.yml$" . yaml-mode))

#+END_SRC

** 'batch-mode'

#+BEGIN_SRC emacs-lisp

  (use-package batch-mode
    :mode ("\\.bat$" . batch-mode))

#+END_SRC

** 'octave'

This isn't really a third party package but I set it up with
~use-package~. Set Matlab m-files to load in octave mode.

#+BEGIN_SRC emacs-lisp

  (use-package octave
    :mode ("\\.m$" . octave-mode))

#+END_SRC

** 'racket-mode'

#+BEGIN_SRC emacs-lisp

  (use-package racket-mode
    :mode ("\\.rkt$" . racket-mode))

#+END_SRC

** 'markdown-mode'

#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
    :mode ("\\.md$" . markdown-mode)
    :mode ("\\.markdown$" . markdown-mode))

#+END_SRC

** 'ess'

#+BEGIN_SRC emacs-lisp

  (use-package ess)

  (require 'ess-site)

  ;; don't ask for starting directory
  (setq ess-ask-for-ess-directory nil)

  ;; just use this as the starting directory
  (setq ess-directory "~")

  (add-hook 'ess-mode-hook
            (lambda ()
              (setq ess-default-style 'GNU)))

  (add-hook 'ess-post-run-hook 'ess-execute-screen-options)

  ;; modified from comint-dynamic-list-input-ring
  (defun jp/r-history ()
    "Display R history."
    (interactive)
    (if (or (not (ring-p comint-input-ring))
            (ring-empty-p comint-input-ring))
        (message "No history")
      (let ((history nil)
            (history-buffer " *R History*")
            (conf (current-window-configuration)))
        ;; We have to build up a list ourselves from the ring vector.
        (dotimes (index (ring-length comint-input-ring))
          (push (ring-ref comint-input-ring index) history))
        (with-output-to-temp-buffer history-buffer
          (with-current-buffer standard-output
            (mapcar (lambda (x) (insert x) (insert "\n")) history))))))

#+END_SRC

** 'magit'

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (if (eql system-type 'windows-nt)
        (setenv "GIT_ASKPASS" "git-gui--askpass")))

#+END_SRC

** 'smex'

#+BEGIN_SRC emacs-lisp

  ;; (use-package smex
  ;;   :bind ("M-x" . smex))

#+END_SRC

** 'browse-kill-ring'

See [[https://github.com/browse-kill-ring/browse-kill-ring][brose-kill-ring]].

#+BEGIN_SRC emacs-lisp

  ;; (use-package browse-kill-ring)

#+END_SRC

** 'undo-tree'
Use ~C-x u~ to visual undo tree.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (progn
      (global-undo-tree-mode +1)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC
** 'expand-region'

See [[https://github.com/magnars/expand-region.el][expand-region]].

#+BEGIN_SRC emacs-lisp

  (use-package expand-region
    :bind ("C-=" . er/expand-region))

#+END_SRC

** 'highlight-symbol

#+BEGIN_SRC emacs-lisp

  (use-package highlight-symbol
    :bind ("C-*" . highlight-symbol-at-point))

#+END_SRC

** 'windresize'

#+BEGIN_SRC emacs-lisp

  (use-package windresize)

#+END_SRC

** 'ace-window'

See [[https://github.com/abo-abo/ace-window][ace-window]] on github.

#+BEGIN_SRC emacs-lisp

  (use-package ace-window)

#+END_SRC

** 'avy'

See [[https://github.com/abo-abo/avy][avy]] on github.

#+BEGIN_SRC emacs-lisp

  (use-package avy
    :bind ("M-g l" . avy-goto-line))

#+END_SRC

** 'dired+'

This gives =dired= some extra features on windows. See [[https://www.emacswiki.org/emacs/DiredPlus#w32-browser][link]].

#+BEGIN_SRC emacs-lisp

  (use-package dired+)
  (use-package w32-browser)

#+END_SRC

[[http://stackoverflow.com/questions/22920659/dired-not-showing-details-anymore][Link]] explaining how to toggle the file listing details--use =(=.

** 'dired-subtree'

I've been looking for this for a long time.

#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
               ("i" . dired-subtree-insert)
               (";" . dired-subtree-remove)))
#+END_SRC

** 'monky'

See [[https://github.com/ananthakumaran/monky][monky]] on github.

#+BEGIN_SRC emacs-lisp

  (use-package monky
    :config
    (setq monky-process-type 'cmdserver))

#+END_SRC

I don't use the ~monky~ package much I guess but I do find files
frequently in large hg repos which is slowed down quite a bit by the
VC backend (~hg status -A~ maybe?). Turn it off like so.

#+BEGIN_SRC emacs-lisp

  (delete 'Hg vc-handled-backends)

#+END_SRC

** 'which-key'

See [[https://github.com/justbur/emacs-which-key][link]].

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :config (which-key-mode))

#+END_SRC

* Temp

** C#

For some reason, csharp-mode messes with reverting buffers, something
about flymake-mode interaction. Requiring ~flymake~ fixed it.

#+BEGIN_SRC emacs-lisp

  (use-package csharp-mode
    :mode ("\\.cs$" . csharp-mode)
    :config
    (add-hook 'csharp-mode-hook (lambda () (setq default-tab-width 4))))

  (require 'flymake)

#+END_SRC
** 'auctex'

#+BEGIN_SRC emacs-lisp

;  (use-package auctex
;    :config
;    (setq TeX-PDF-mode t))

#+END_SRC

** Misc elisp

#+BEGIN_SRC emacs-lisp

  (defun jp/time-stamp ()
    (format-time-string "%Y-%m-%d %H:%M:%S"))


  (defun jp/today ()
    (format-time-string "%Y-%m-%d"))


  (defun jp/parent-dir (directory-or-file)
    "Return the parent directory of `directory-or-file'."
    (file-name-directory (directory-file-name directory-or-file)))


  (defun jp/jekyll-title->file-name (title)
    (concat (jp/today) "-" (replace-regexp-in-string " " "-" (downcase title)) ".md"))


  (defun jp/jekyll-header (title &optional layout)
    (let ((layouttype (if (null layout) "post" layout)))
      (concat
       "---\n"
       (format "layout: %s\n" layouttype)
       (format "title: %s\n" title)
       (format "date: %s\n" (jp/time-stamp))
       "tags:\n"
       "---\n")))


  (defun jp/jekyll-find-root (directory)
    (let ((parent (jp/parent-dir directory)))
      (cond
       ((file-exists-p (concat (file-name-as-directory directory) "_posts"))
        (file-name-as-directory directory))
       ((string-equal directory parent)
        nil)
       (t
        (jp/jekyll-find-root parent)))))


  (defun jp/jekyll-new-post (title)
    (interactive "MPost title: ")
    (let ((dir (jp/jekyll-find-root default-directory)))
      (if (null dir) (error "Not in a jekyll directory."))
      (let ((fname (concat (file-name-as-directory dir)
                           (file-name-as-directory "_posts")
                           (jp/jekyll-title->file-name title))))
        (find-file fname)
        (insert (jp/jekyll-header title)))))


  (defun jp/run-file ()
    (interactive)
    (when (buffer-modified-p) (save-buffer))
    (shell-command (concat "python " buffer-file-name) "*run-file-python-output*"))


  (global-set-key (kbd "<f5>") 'jp/run-file)


  (defun jp/ms-open (path)
    "Open file on MS-Windows."
    (shell-command
     (concat "start \"title\" " (shell-quote-argument path))))

#+END_SRC

[[http://emacsredux.com/blog/2016/01/31/use-tab-to-indent-or-complete/][Link]] to post.

#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

** Open stuff on Windows

The original idea was to be able to open a file using the file
associations on Windows. Here is a [[http://stackoverflow.com/questions/2284319/opening-files-with-default-windows-application-from-within-emacs][StackOverflow]] link that gives a few
options. For now I like the dired+ options.

*** jp/open-with

I modified this from [[https://github.com/bbatsov/crux][crux]].

#+BEGIN_SRC emacs-lisp

  (defun jp/open-with (arg)
    "Open visited file in default external program.
  When in dired mode, open file under the cursor.
  With a prefix ARG always prompt for command to use."
    (interactive "P")
    (let* ((current-file-name
            (if (eq major-mode 'dired-mode)
                (dired-get-file-for-visit)
              buffer-file-name))
           (open (pcase system-type
                   (`darwin "open")
                   (`windows-nt "start")
                   ((or `gnu `gnu/linux `gnu/kfreebsd) "xdg-open")))
           (program (if (or arg (not open))
                        (read-shell-command "Open current file with: ")
                      open)))
      ;;    (start-process "crux-open-with-process" nil program current-file-name)))
      (async-shell-command (concat open " " current-file-name))))

#+END_SRC

*** jp/launch-explorer

#+BEGIN_SRC emacs-lisp

  (defun jp/launch-explorer ()
    "Launch Windows Explorer from dired-mode."
    (interactive)
    (let* ((directory (file-name-directory (dired-get-file-for-visit)))
           (dir (replace-regexp-in-string "/" "\\\\" directory)))
      (start-process "explorer" "*Explorer*" "explorer" dir)))


  (defun jp/launch-explorer ()
    "Launch Windows Explorer from dired-mode."
    (interactive)
    (let* ((directory (file-name-directory (dired-get-file-for-visit)))
           (dir (replace-regexp-in-string "/" "\\\\" directory)))
      (w32-shell-execute "open" dir)))

#+END_SRC

** jp/fill-or-unfill

[[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html][See post]].

#+BEGIN_SRC emacs-lisp

  (defun jp/fill-or-unfill ()
    "Like `fill-paragraph', but unfill if used twice."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'jp/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

#+END_SRC

